



# =====限流=====================
# 对所有产品页相关链接限流(严格级别,对用户体验有一定影响,一般情况下,对大多数爬虫有显著效果)
# limit_req zone=user_limit burst=5 nodelay;

location ~ ^/product/ {
    # burst参数的数值越小，限制越严格,3~5是十分严格,10是一般严格
    limit_req zone=product_limit burst=7 nodelay; 
    limit_req zone=bot_limit burst=1 nodelay;

    # 可选：自定义限流返回状态码
    limit_req_status 429; 
    # 继续 WordPress 的 rewrite 规则
    try_files $uri $uri/ /index.php?$args;
}
 

# 匹配所有包含 "add-to-cart=" 的请求
# 点击模板产品卡片添加购物车按钮触发:POST /?wc-ajax=add_to_cart (基础行为),根据不同模板,可能附带POST /wp-admin/admin-ajax.php,GET /?wc-ajax=get_refreshed_fragments 等其他副操作
# 如果从产品详情页点击添加购物车,则发送的情况可能有所不同,比如POST /产品路径 ,这里面可能没有出现'add_to_cart'字符串

location ~* "add-to-cart=" {
    # 限制请求频率：1次/秒，突发最多2次，超出直接拒绝（不排队）
    limit_req zone=cart_limit burst=2 nodelay;

    # 可选：记录被限流的日志（便于监控）
    # limit_req_log_level warn;
    limit_req_status 429;

    # 继续交给 WordPress/WooCommerce 处理
    try_files $uri $uri/ /index.php$is_args$args;
}
# 媒体文件访问限流
# location ~ ^/wp-content/uploads/ { #可以对所有文件限流
#   limit_req zone=uploads_limit burst=20 nodelay;
#   try_files $uri =404;
# }
# 对图片限流
location ~* ^/wp-content/uploads/.*\.(webp|jpg|png)$ { 
    limit_req zone=img_limit burst=20 nodelay;
    # 限制下载速度为200KB/s
    limit_rate 200k;  

    # 缓存优化
    expires 1y;
    add_header Cache-Control "public, immutable";

    # 静态文件直接返回(检查 $uri（请求路径对应的物理文件）是否存在,存在直接返回,否则404；)
    try_files $uri =404;
}


# 对php脚本请求限流
# location ~ \.php$ {
#       # 只对 POST 请求限流
#     limit_req zone=post_limit burst=3 nodelay if=$is_post;
#     limit_req_status 429;
# }
# --- 可选：拦截高频 bot 请求 ---
# location / {
#     limit_req zone=bots nodelay;
#     # 正常流量继续
#     try_files $uri $uri/ /index.php?$args;

# ===================== 禁止访问敏感路径 =====================

# 防止路径遍历和双斜杠绕过(多斜杠,由于是正则匹配(包含检查),所以超过2个斜杠也会被命中,无需使用//+或/{2,}匹配)
if ($request_uri ~* "//") {
    return 444;
}

# --- 拦截 xmlrpc.php ---
# location ~* /xmlrpc\.php$ {
# location ~* xmlrpc\.php {
location ~* (xmlrpc|wlwmanifest\.xml|wp-login|/wordpress/|/setup-config\.php) {
    return 444;
    # access_log off;
    # log_not_found off;
}

# --- 禁止访问 WordPress 登录页及配置文件 ---
# 限制用户枚举扫描
# 限制 REST API 用户枚举
# 粗暴禁止访问或跳转到/wp-login.php，配置不当的话部分情况会拦住自己人，如有特殊需要，可以临时开放
# (通常正确安装并激活wps-hide-login后不会被此规则拦截，自己人使用约定的入口url可以登录后台)
# location = /wp-login.php {
#     return 444;
# }
# location ~* wp-login\.php {
location ~* wp-login|/\?author=\d+|/wp-json/wp/v\d+/users{
    deny all;
    return 444;
}

# --- 屏蔽隐藏文件（.env、.git 等） ---
location ~* /\.(git|svn|hg|env|ssh|DS_Store) {
    deny all;
    return 444;
}

# --- 屏蔽数据库/备份文件 ---
location ~* /(dump\.sql|backup(\.sql|\.tar\.gz|\.zip|\.bak)?|database(_backup)?\.sql|schema\.rb) {
    deny all;
    return 444;
}

# --- 屏蔽配置/凭证文件 ---
location ~* /(config(\.json|\.ya?ml|\.php|\.xml)?|secrets?\.json|user_secrets\.yml|production\.json|credentials|id_(rsa|ecdsa|ed25519)|server\.key|\.pem) {
    deny all;
    return 444;
}

# --- 屏蔽开发工具配置 ---
location ~* /(\.vscode|\.idea|sftp\.json|docker-compose\.ya?ml|cloud-config\.ya?ml) {
    deny all;
    return 444;
}

# --- 屏蔽敏感调试接口 ---
location ~* /(phpinfo\.php|server-status|_vti_pvt/service\.pwd) {
    deny all;
    return 444;
}



# 拒绝非 Google/Bing 爬虫
if ($allow_access_ua = 0) {
    return 444; # 直接断开连接
}

# 静止google访问添加到购物车按钮链接
if ($block_googlebot_cart) {
    return 403;
}
# --- 保护 wp-cron.php（可选）---
# 正常应由内部触发，不建议公开访问
location = /wp-cron.php {
    # deny all;  # 如果你用系统 cron 替代
    allow 127.0.0.1;  # 只允许本地或 Cloudflare谨慎
    # allow 172.68.0.0/16;  # Cloudflare IP 段（可选）
    deny all;
}



# --- 日志文件控制 ---
location ~* \.(?:ico|css|js|gif|jpe?g|png|ttf|svg|webp)$ {
    access_log off;
    log_not_found off;
    expires 30d;
}
