
# ====限制非正常客户添加购物车(恶意或者不必要的add-to-cart行为)====================
# 检查是否包含 add-to-cart 查询参数在server块上下文中,会被各location上下文所继承
# 例如googlebot可能会访问 "GET /product/.../?add-to-cart=147667 HTTP/1.1"
# 其他伪装UA或人类用户的爬虫比如: "GET /?add-to-cart=263827 HTTP/1.1"

# 经过模拟测试和初步分析可知,正常用户买产品的日志中仅有一条和add to cart相关的日志
# 核心购物操作:点击模板产品卡片添加购物车按钮触发:POST /?wc-ajax=add_to_cart (基础行为),根据不同模板,
# 可能附带POST /wp-admin/admin-ajax.php,GET /?wc-ajax=get_refreshed_fragments 等其他副操作
# 如果从产品详情页点击添加购物车也不会有add-to-cart相关记录(注意连字符和下划线的区别)
# 对于add_to_cart的链接可以考虑做专门的限流,而对add-to-cart做限制访问
# [特殊情况add-to-cart]
# 1.有些模板没有使用ajax添加购物车,比如首页点击添加购物车,会访问add-to-cart链接,这种情况下考虑不禁用add-to-cart路径
# 2.多数模板在首页上展示的产品卡片上的如果有购物车按钮,并且首页还么有来得及加载完毕,用户就点击了添加购物车按钮,也会访问add-to-cart链接,
#   但是正常客户不太可能这么做,一般只会发生在网站检查的时候.


# 匹配所有查询参数中包含"add-to-cart=" 字符串的请求
# 方案1:使用map(总配置http上下文中定义变量$has_add_to_cart)+if
if ($has_add_to_cart) {
    return 403;
}
# 方案2:直接使用if
# if ($args ~* "add-to-cart=") {
#     return            403;
# }

# =====基础限流=====================
# 对所有产品页相关链接限流(严格级别,对用户体验有一定影响,一般情况下,对大多数爬虫有显著效果)
# 普通产品限流
location ~ ^/product/ {

    #                 burst参数的数值越小，限制越严格,3~5是十分严格,10是一般严格
    limit_req         zone=product_limit burst=7 nodelay;
    limit_req         zone=bot_limit burst=1 nodelay;
    #                 可选：自定义限流返回状态码
    limit_req_status  429;
    #                 继续 WordPress 的 rewrite 规则
    try_files         $uri $uri/ /index.php?$args;
}

# 对图片限流
location ~* ^/wp-content/uploads/.*\.(webp|jpg|png)$ {
    limit_req zone=img_limit burst=20 nodelay;
    #                 限制下载速度为200KB/s
    limit_rate 200k;

    #                 缓存优化
    expires 1y;
    add_header Cache-Control "public, immutable";

    #                 静态文件直接返回(检查 $uri（请求路径对应的物理文件）是否存在,存在直接返回,否则404；)
    try_files $uri =404;
}



# ===================== 禁止访问敏感路径 =====================
# 防止路径遍历和双斜杠绕过(多斜杠,由于是正则匹配(包含检查),所以超过2个斜杠也会被命中,无需使用//+或/{2,}匹配)
if ($request_uri ~* "//") {
    return 444;
}

# --- 拦截 xmlrpc.php ---

location ~* (xmlrpc|wlwmanifest\.xml|WSVulnerabilityCore|CDGServer|SystemConfig|xstoremgwt|cgi-bin|/dana-ws/|/send_order.cgi|wp-login|/manage|/wordpress/|/setup-config\.php|exciter\.php|parameter=) {
    return 444;
    #                 access_log off;
    #                 log_not_found off;
}

# --- 禁止访问 WordPress 登录页及配置文件 ---
# 限制用户枚举扫描
# 限制 REST API 用户枚举
# 粗暴禁止访问或跳转到/wp-login.php，配置不当的话部分情况会拦住自己人，如有特殊需要，可以临时开放
# (通常正确安装并激活wps-hide-login后不会被此规则拦截，自己人使用约定的入口url可以登录后台)
# 如果不需要使用api可以限制/api/,但是不能直接限制api关键词,否则一些用户操作会受影响,比如查看购车中的商品(GET /wp-json/wc/store/v1/cart?...)
# 此外/wp-json/也不能直接限制,否则有的模板购物车页面数量增减会失败!(POST /wp-json/wc/store/v1/batch?_locale=site)
# 还有/wc-api/有时跳转会用到
# location = /wp-login.php {
#     return 444;
# }
# location ~* wp-login\.php {
location ~* wp-login|/api/|/\?author=\d+|/wp-json/wp/v\d+/users {
    deny all;
    return 444;
}

# --- 屏蔽隐藏文件（.env、.git 等） ---
location ~* /\.(git|svn|hg|env|ssh|DS_Store) {
    deny all;
    return 444;
}

# --- 屏蔽数据库/备份文件 ---
location ~* /(dump\.sql|backup(\.sql|\.tar\.gz|\.zip|\.bak)?|database(_backup)?\.sql|schema\.rb) {
    deny all;
    return 444;
}

# --- 屏蔽配置/凭证文件 ---
location ~* /(config(\.json|\.ya?ml|\.php|\.xml)?|secrets?\.json|user_secrets\.yml|production\.json|credentials|id_(rsa|ecdsa|ed25519)|server\.key|\.pem) {
    deny all;
    return 444;
}

# --- 屏蔽开发工具配置 ---
location ~* /(\.vscode|\.idea|sftp\.json|docker-compose\.ya?ml|cloud-config\.ya?ml) {
    deny all;
    return 444;
}

# --- 屏蔽敏感调试接口 ---
location ~* /(phpinfo\.php|server-status|_vti_pvt/service\.pwd) {
    deny all;
    return 444;
}


# 拒绝非 Google/Bing 爬虫
if ($allow_access_ua = 0) {
    return 444; # 直接断开连接
}

# 禁止google访问添加到购物车按钮链接
if ($block_googlebot_cart) {
    return 403;
}
# 禁止CN用户访问(在各个vhost或者共同include的共用com.conf中加入此段)
if ($block_cn = 1) {
    return 444;
}

# --- 日志文件控制 ---
location ~* \.(?:ico|css|js|gif|jpe?g|png|ttf|svg|webp)$ {
    access_log off;
    log_not_found off;
    expires 30d;
}

# --- 保护 wp-cron.php（可选）---
# 正常应由内部触发，不建议公开访问
# location = /wp-cron.php {
#     #                 deny all; # 如果你用系统 cron 替代
#     allow             127.0.0.1; # 只允许本地或 Cloudflare谨慎
#     #                 allow 172.68.0.0/16; # Cloudflare IP 段（可选）
#     deny              all;
# }

# ip 黑名单
deny 167.99.124.181;
deny 137.184.1.229;